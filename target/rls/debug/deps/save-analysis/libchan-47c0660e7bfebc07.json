{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23","program":"/Users/tyco/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","chan","/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","-C","metadata=47c0660e7bfebc07","-C","extra-filename=-47c0660e7bfebc07","--out-dir","/Users/tyco/Documents/GitHub/EinsteinDB/target/rls/debug/deps","-L","dependency=/Users/tyco/Documents/GitHub/EinsteinDB/target/rls/debug/deps","--extern","rand=/Users/tyco/Documents/GitHub/EinsteinDB/target/rls/debug/deps/librand-b55350e000483996.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/tyco/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/tyco/Documents/GitHub/EinsteinDB/target/rls/debug/deps/libchan-47c0660e7bfebc07.rmeta"},"prelude":{"crate_id":{"name":"chan","disambiguator":[16043255176693260171,0]},"crate_root":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src","external_crates":[{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[5737620048972976797,0]}},{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[2242199718071837415,0]}},{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[2188212999151601010,0]}},{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[1020664553731942337,0]}},{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[5221923779696816614,0]}},{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[10454403582981253701,0]}},{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[7392107620293427149,0]}},{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[9383090470819858406,0]}},{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[13561338507145107503,0]}},{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2153887466384468734,0]}},{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[11638676648589799525,0]}},{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","num":12,"id":{"name":"std_detect","disambiguator":[17336646944492823354,0]}},{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","num":13,"id":{"name":"addr2line","disambiguator":[16179365956064936006,0]}},{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","num":14,"id":{"name":"gimli","disambiguator":[2085897901681677768,0]}},{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","num":15,"id":{"name":"object","disambiguator":[4724748409658749452,0]}},{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","num":16,"id":{"name":"memchr","disambiguator":[13513626471981952824,0]}},{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[14681960900203760207,0]}},{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","num":18,"id":{"name":"rand","disambiguator":[2502803941970290332,0]}},{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","num":19,"id":{"name":"rand","disambiguator":[6563605576713449877,0]}},{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","num":20,"id":{"name":"libc","disambiguator":[6295604786319992675,0]}}],"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":0,"byte_end":54434,"line_start":1,"line_end":1760,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":152},"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":13480,"byte_end":13486,"line_start":411,"line_end":411,"column_start":18,"column_end":24},"alias_span":null,"name":"Select","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":426},"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":13488,"byte_end":13504,"line_start":411,"line_end":411,"column_start":26,"column_end":42},"alias_span":null,"name":"SelectRecvHandle","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":418},"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":13506,"byte_end":13522,"line_start":411,"line_end":411,"column_start":44,"column_end":60},"alias_span":null,"name":"SelectSendHandle","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":435},"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":13567,"byte_end":13576,"line_start":413,"line_end":413,"column_start":21,"column_end":30},"alias_span":null,"name":"WaitGroup","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":0,"byte_end":54434,"line_start":1,"line_end":1760,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":59},{"krate":0,"index":62},{"krate":0,"index":65},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":105},{"krate":0,"index":224},{"krate":0,"index":245},{"krate":0,"index":269},{"krate":0,"index":271},{"krate":0,"index":273},{"krate":0,"index":275},{"krate":0,"index":277},{"krate":0,"index":279},{"krate":0,"index":440},{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":446},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":451},{"krate":0,"index":454},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":472},{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":477},{"krate":0,"index":480},{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":486},{"krate":0,"index":281},{"krate":0,"index":284},{"krate":0,"index":287},{"krate":0,"index":291},{"krate":0,"index":296},{"krate":0,"index":488},{"krate":0,"index":492},{"krate":0,"index":495},{"krate":0,"index":499},{"krate":0,"index":502},{"krate":0,"index":506},{"krate":0,"index":509},{"krate":0,"index":516},{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":302},{"krate":0,"index":527},{"krate":0,"index":533},{"krate":0,"index":536},{"krate":0,"index":548},{"krate":0,"index":311},{"krate":0,"index":551},{"krate":0,"index":561},{"krate":0,"index":316},{"krate":0,"index":564},{"krate":0,"index":573},{"krate":0,"index":321},{"krate":0,"index":329},{"krate":0,"index":338},{"krate":0,"index":343},{"krate":0,"index":356},{"krate":0,"index":361},{"krate":0,"index":370},{"krate":0,"index":379},{"krate":0,"index":382},{"krate":0,"index":385},{"krate":0,"index":388},{"krate":0,"index":392},{"krate":0,"index":396},{"krate":0,"index":400},{"krate":0,"index":404},{"krate":0,"index":407},{"krate":0,"index":410},{"krate":0,"index":412},{"krate":0,"index":414},{"krate":0,"index":417}],"decl_id":null,"docs":"This crate provides an implementation of a multi-producer, multi-consumer\nchannel. Channels come in three varieties:","sig":null,"attributes":[{"value":"*\nThis crate provides an implementation of a multi-producer, multi-consumer\nchannel. Channels come in three varieties:\n\n1. Asynchronous channels. Sends never block. Its buffer is only limited by the\n   available resources on the system.\n2. Synchronous buffered channels. Sends block when the buffer is full. The\n   buffer is depleted by receiving on the channel.\n3. Rendezvous channels (synchronous channels without a buffer). Sends block\n   until a receive has consumed the value sent. When a sender and receiver\n   synchronize, they are said to *rendezvous*.\n\nAsynchronous channels are created with `chan::async()`. Synchronous channels\nare created with `chan::sync(k)` where `k` is the buffer size. Rendezvous\nchannels are created with `chan::sync(0)`.\n\nAll channels are split into the same two types upon creation: a `Sender` and\na `Receiver`. Additional senders and receivers can be created with reckless\nabandon by calling `clone`.\n\nWhen all senders are dropped, the channel is closed and no other sends are\npossible. In a channel with a buffer, receivers continue to consume values\nuntil the buffer is empty, at which point, a `None` value is always returned\nimmediately.\n\nNo special semantics are enforced when all receivers are dropped. Asynchronous\nsends will continue to work. Synchronous sends will block indefinitely when\nthe buffer is full. A send on a rendezvous channel will also block\nindefinitely. (**NOTE**: This could be changed!)\n\nAll channels satisfy *both* `Send` and `Sync` and can be freely mixed in\n`chan_select!`. Said differently, the synchronization semantics of a channel\nare encoded upon construction, but are otherwise indistinguishable to the\ntype system.\n\nValues sent on channels are subject to the normal restrictions Rust has on\nvalues crossing thread boundaries. i.e., Values must implement `Send` and/or\n`Sync`. (An `Rc<T>` *cannot* be sent on a channel, but a channel can be sent\non a channel!)\n\n\n# Example: rendezvous channel\n\nA simple example demonstrating a rendezvous channel:\n\n```\nuse std::thread;\n\nlet (send, recv) = chan::sync(0);\nthread::spawn(move || send.send(5));\nassert_eq!(recv.recv(), Some(5)); // blocks until the previous send occurs\n```\n\n\n# Example: synchronous channel\n\nSimilarly, an example demonstrating a synchronous channel:\n\n```\nlet (send, recv) = chan::sync(1);\nsend.send(5); // doesn't block because of the buffer\nassert_eq!(recv.recv(), Some(5));\n```\n\n\n# Example: multiple producers and multiple consumers\n\nAn example demonstrating multiple consumers and multiple producers:\n\n```\nuse std::thread;\n\nlet r = {\n    let (s, r) = chan::sync(0);\n    for letter in vec!['a', 'b', 'c', 'd'] {\n        let s = s.clone();\n        thread::spawn(move || {\n            for _ in 0..10 {\n                s.send(letter);\n            }\n        });\n    }\n    // This extra lexical scope will drop the initial\n    // sender we created. Thus, the channel will be\n    // closed when all threads spawned above has completed.\n    r\n};\n\n// A wait group lets us synchronize the completion of multiple threads.\nlet wg = chan::WaitGroup::new();\nfor _ in 0..4 {\n    wg.add(1);\n    let wg = wg.clone();\n    let r = r.clone();\n    thread::spawn(move || {\n        for letter in r {\n            println!(\"Received letter: {}\", letter);\n        }\n        wg.done();\n    });\n}\n\n// If this was the end of the process and we didn't call `wg.wait()`, then\n// the process might quit before all of the consumers were done.\n// `wg.wait()` will block until all `wg.done()` calls have finished.\nwg.wait();\n```\n\n\n# Example: Select on multiple channel sends/receives\n\nAn example showing how to use `chan_select!` to synchronize on sends\nor receives.\n\n```\n#[macro_use]\nextern crate chan;\n\nuse std::thread;\n\n// Emits the fibonacci sequence on the given channel until `quit` receives\n// a sentinel value.\nfn fibonacci(s: chan::Sender<u64>, quit: chan::Receiver<()>) {\n    let (mut x, mut y) = (0, 1);\n    loop {\n        // Select will block until at least one of `s.send` or `quit.recv`\n        // is ready to succeed. At which point, it will choose exactly one\n        // send/receive to synchronize.\n        chan_select! {\n            s.send(x) => {\n                let oldx = x;\n                x = y;\n                y = oldx + y;\n            },\n            quit.recv() => {\n                println!(\"quit\");\n                return;\n            }\n        }\n    }\n}\n\nfn main() {\n    let (s, r) = chan::sync(0);\n    let (qs, qr) = chan::sync(0);\n    // Spawn a thread and ask for the first 10 numbers in the fibonacci\n    // sequence.\n    thread::spawn(move || {\n        for _ in 0..10 {\n            println!(\"{}\", r.recv().unwrap());\n        }\n        // Dropping all sending channels causes the receive channel to\n        // immediately and always synchronize (because the channel is closed).\n        drop(qs);\n    });\n    fibonacci(s, qr);\n}\n```\n\n\n# Example: non-blocking sends/receives\n\nThis crate specifically does not expose methods like `try_send` or `try_recv`.\nInstead, you should prefer using `chan_select!` to perform a non-blocking\nsend or receive. This can be done by telling select what to do when no\nsynchronization events are available.\n\n```\n# #[macro_use] extern crate chan; fn main() {\nlet (s, _) = chan::sync(0);\nchan_select! {\n    default => println!(\"Send failed.\"),\n    s.send(\"some data\") => println!(\"Send succeeded.\"),\n}\n# }\n```\n\nWhen `chan_select!` first runs, it will check if `s.send(...)` can succeed\n*without blocking*. If so, `chan_select!` will permit the channels to\nrendezvous. However, if there is no `recv` call to accept the send, then\n`chan_select!` will immediately execute the `default` arm.\n\n\n# Example: the sentinel channel idiom\n\nWhen writing concurrent programs with `chan`, you will often find that you need\nto somehow \"wait\" until some operation is done. For example, let's say you want\nto run a function in a separate thread, but wait until it completes. Here's\none way to do it:\n\n```rust\nuse std::thread;\n\nfn do_work(done: chan::Sender<()>) {\n    // do something\n\n    // signal that we're done.\n    done.send(());\n}\n\nfn main() {\n    let (sdone, rdone) = chan::sync(0);\n    thread::spawn(move || do_work(sdone));\n    // block until work is done, and then quit the program.\n    rdone.recv();\n}\n```\n\nIn effect, we've created a new channel that sends unit values. When we're\ndone doing work, we send a unit value and `main` waits for it to be delivered.\n\nAnother way of achieving the same thing is to simply close the channel. Once\nthe channel is closed, any previously blocked receive operations become\nimmediately unblocked. What's even cooler is that channels are closed\nautomatically when all senders are dropped. So the new program looks something\nlike this:\n\n```rust\nuse std::thread;\n\nfn do_work(_done: chan::Sender<()>) {\n    // do something\n}\n\nfn main() {\n    let (sdone, rdone) = chan::sync(0);\n    thread::spawn(move || do_work(sdone));\n    // block until work is done, and then quit the program.\n    rdone.recv();\n}\n```\n\nWe no longer need to explicitly do anything with the `_done` channel. We give\n`do_work` ownership of the channel, but as soon as the function stops\nexecuting, `_done` is dropped, the channel is closed and `rdone.recv()`\nunblocks.\n\n\n# Example: I want more!\n\nThere are some examples in this crate's repository:\nhttps://github.com/BurntSushi/chan/tree/master/examples\n\nHere is a nice example using the `chan-signal` crate to read lines from\nstdin while gracefully quitting after receiving a `INT` or `TERM`\nsignal:\nhttps://github.com/BurntSushi/chan-signal/blob/master/examples/read_names.rs\n\nA non-trivial program for periodically sending email with the output of\nrunning a command: https://github.com/BurntSushi/rust-cmail (The source is\ncommented more heavily than normal.)\n\n\n# When are channel operations non-blocking?\n\nNon-blocking in this context means \"a send/recv operation can synchronize\nimmediately.\" (Under the hood, a mutex may still be acquired, which could\nblock.)\n\nThe following is a list of all cases where a channel operation is considered\nnon-blocking:\n\n* A send on a synchronous channel whose buffer is not full.\n* A receive on a synchronous channel with a non-empty buffer.\n* A send on an asynchronous channel.\n* A rendezvous send or recv when a corresponding recv or send operation is\nalready blocked, respectively.\n* A receive on any closed channel.\n\nNon-blocking semantics are important because they affect the behavior of\n`chan_select!`. In particular, a `chan_select!` with a `default` arm will\nexecute the `default` case if and only if all other operations are blocked.\n\n\n# Which channel type should I use?\n\n[From Ken Kahn](http://www.eros-os.org/pipermail/e-lang/2003-January/008183.html):\n\n> About 25 years ago I went to dinner with Carl Hewitt and Robin Milner (of\n> CSS and pi calculus fame) and they were arguing about synchronous vs.\n> asynchronous communication primitives. Carl used the post office metaphor\n> while Robin used the telephone. Both quickly admitted that one can implement\n> one in the other.\n\nWith three channel types to choose from, it may not always be clear which one\nyou should use. In fact, there has been a long debate over which are better.\nHere are some rough guidelines:\n\n* Historically, asynchronous channels have been associated with the actor\nmodel, which means they're a little out of place in a library inspired by\ncommunicating sequential processes. Nevertheless, an unconstrained buffer can\nbe occasionally useful.\n* Synchronous channels are useful because their stricter synchronization\nsemantics can make it easier to reason about the flow of your program. In\nparticular, with a rendezvous channel, one knows that a `send` unblocks only\nwhen a corresponding `recv` consumes the sent value. This makes it *feel*\nan awful lot like a function call!\n\n\n# Warning: leaks\n\nChannels can be leaked! In particular, if all receivers have been dropped,\nthen any future sends will block. Usually this is indicative of a bug in your\nprogram.\n\nFor example, consider a \"generator\" style pattern where a thread produces\nvalues on a channel and another thread consumes in an iterator.\n\n```no_run\nuse std::thread;\n\nlet (s, r) = chan::sync(0);\n\nthread::spawn(move || {\n    for val in r {\n        if val >= 2 {\n            break;\n        }\n    }\n});\n\ns.send(1);\ns.send(2);\n// This will deadlock because the loop in the thread\n// above quits after receiving `2`.\ns.send(3);\n```\n\nIf the iterator loop quits early, the channel's buffer could fill up, which\nwill indefinitely block all future send operations.\n\n(These leaks/deadlocks are detectable in most circumstances, and a `send`\noperation could be made to wake up and either return an error or panic. The\nsemantics here are still experimental.)\n\n\n# Warning: more leaks\n\nIt will always be possible to leak a channel in safe code regardless of the\nchannel's semantics. For example:\n\n```no_run\nuse std::mem::forget;\n\nlet (s, r) = chan::sync::<()>(0);\nforget(s);\n// Blocks forever because the channel is never closed.\nr.recv();\n```\n\nIn this case, it is impossible for the channel to close because the internal\nreference count will never reach `0`.\n\n\n# Warning: performance\n\nThe primary purpose of this crate is to provide a safe, concurrent abstraction.\nNotably, it is *not* a zero-cost abstraction. It is not even a near-zero-cost\nabstraction. Throughput on a channel is startlingly low (see the benchmarks\nin this crate's repository). Therefore, the channels provided in this crate\nare most useful as a means to structure concurrent programs at a coarse level.\n\nIf your requirements call for performant synchronization of data, `chan` is not\nthe crate you're looking for.\n\n\n# Prior art\n\nThe semantics encoded in the channels provided by this crate should mirror or\nclosely mirror the semantics provided by channels in Go. This includes\nselect statements! The major difference between concurrent programs written\nwith `chan` and concurrent programs written with Go is that Go programs can\nbenefit from being fast and loose with creating goroutines. In `chan`, each\n\"goroutine\" is just an OS thread.\n\nIn terms of writing code:\n\n1. Go programs will feature explicit closing of channels. In `chan`, channels\n   are closed **only** when all senders have been dropped.\n2. Since there is no such thing as a \"nil\" channel in `chan`, the semantics Go\n   has for nil channels (both sends and receives block indefinitely) do not\n   exist in `chan`.\n3. `chan` does not expose `len` or `cap` methods. (For no reason other than\n   to start with a totally minimal API. In particular, calling `len` or `cap`\n   on a channel is often The Wrong Thing. But not always. So this restriction\n   may be lifted in the future.)\n4. In `chan`, all channels are either senders or receivers. There is no\n   \"bidirectional\" channel. This is manifest in how channel memory is managed:\n   channels are closed when all senders are dropped.\n\nOf course, Go is not the origin of these ideas, but it has been the\nstrongest influence on the design of this library, and at least one of its\nauthors has done substantial research on the integration of CSP and programming\nlanguages.\n*/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":0,"byte_end":13136,"line_start":1,"line_end":395,"column_start":1,"column_end":3}},{"value":"deny(missing_docs)","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":13138,"byte_end":13160,"line_start":397,"line_end":397,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":152},"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":57709,"byte_end":57715,"line_start":22,"line_end":22,"column_start":12,"column_end":18},"name":"Select","qualname":"::select::Select","value":"Select {  }","parent":null,"children":[{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157}],"decl_id":null,"docs":" Select encapsulates synchronization on at most one channel operation.","sig":null,"attributes":[{"value":"/ Select encapsulates synchronization on at most one channel operation.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":57089,"byte_end":57162,"line_start":10,"line_end":10,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":57163,"byte_end":57166,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This type was *specifically built* to work inside a macro like","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":57167,"byte_end":57233,"line_start":12,"line_end":12,"column_start":1,"column_end":67}},{"value":"/ `chan_select!`. As a result, it is extremely unergonomic to use manually","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":57234,"byte_end":57310,"line_start":13,"line_end":13,"column_start":1,"column_end":77}},{"value":"/ without the macro (see the `select_manual` test). Therefore, it is hidden","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":57311,"byte_end":57388,"line_start":14,"line_end":14,"column_start":1,"column_end":78}},{"value":"/ from the public API. It is, in every sense of the word, an implementation","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":57389,"byte_end":57466,"line_start":15,"line_end":15,"column_start":1,"column_end":78}},{"value":"/ detail.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":57467,"byte_end":57478,"line_start":16,"line_end":16,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":57479,"byte_end":57482,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ If we want to expose a select interface not built on a macro then it","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":57483,"byte_end":57555,"line_start":18,"line_end":18,"column_start":1,"column_end":73}},{"value":"/ probably shouldn't be this one. However, doing it in a way that is both","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":57556,"byte_end":57631,"line_start":19,"line_end":19,"column_start":1,"column_end":76}},{"value":"/ ergonomic and hetergeneous is probably tricky.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":57632,"byte_end":57682,"line_start":20,"line_end":20,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":418},"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":58417,"byte_end":58433,"line_start":41,"line_end":41,"column_start":12,"column_end":28},"name":"SelectSendHandle","qualname":"::select::SelectSendHandle","value":"SelectSendHandle {  }","parent":null,"children":[{"krate":0,"index":421}],"decl_id":null,"docs":" The result of adding a send operation to `Select`.","sig":null,"attributes":[{"value":"/ The result of adding a send operation to `Select`.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":58191,"byte_end":58245,"line_start":35,"line_end":35,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":58246,"byte_end":58249,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ This exposes a uniform interface with `SelectRecvHandle`. Namely, the id","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":58250,"byte_end":58326,"line_start":37,"line_end":37,"column_start":1,"column_end":77}},{"value":"/ of the underlying channel can be accessed.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":58327,"byte_end":58373,"line_start":38,"line_end":38,"column_start":1,"column_end":47}}]},{"kind":"Struct","id":{"krate":0,"index":426},"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":58857,"byte_end":58873,"line_start":54,"line_end":54,"column_start":12,"column_end":28},"name":"SelectRecvHandle","qualname":"::select::SelectRecvHandle","value":"SelectRecvHandle {  }","parent":null,"children":[{"krate":0,"index":429},{"krate":0,"index":430}],"decl_id":null,"docs":" The result of adding a recv operation to `Select`.","sig":null,"attributes":[{"value":"/ The result of adding a recv operation to `Select`.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":58475,"byte_end":58529,"line_start":45,"line_end":45,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":58530,"byte_end":58533,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ This exposes a uniform interface with `SelectRecvHandle`. Namely, the id","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":58534,"byte_end":58610,"line_start":47,"line_end":47,"column_start":1,"column_end":77}},{"value":"/ of the underlying channel can be accessed.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":58611,"byte_end":58657,"line_start":48,"line_end":48,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":58658,"byte_end":58661,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ This also stores a reference to the value that has been received. The","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":58662,"byte_end":58735,"line_start":50,"line_end":50,"column_start":1,"column_end":74}},{"value":"/ value is shared with a `Choice` in `Select`'s map of subscribed channels.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":58736,"byte_end":58813,"line_start":51,"line_end":51,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":60181,"byte_end":60184,"line_start":97,"line_end":97,"column_start":12,"column_end":15},"name":"new","qualname":"<Select>::new","value":"pub fn new() -> Select","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Select`.\n","sig":null,"attributes":[{"value":"/ Create a new `Select`.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":60143,"byte_end":60169,"line_start":96,"line_end":96,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":183},"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":60648,"byte_end":60654,"line_start":113,"line_end":113,"column_start":12,"column_end":18},"name":"select","qualname":"<Select>::select","value":"pub fn select(&mut Self) -> ChannelId","parent":null,"children":[],"decl_id":null,"docs":" Perform a select. Block until exactly one channel operation\n synchronizes.\n","sig":null,"attributes":[{"value":"/ Perform a select. Block until exactly one channel operation","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":60551,"byte_end":60614,"line_start":111,"line_end":111,"column_start":5,"column_end":68}},{"value":"/ synchronizes.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":60619,"byte_end":60636,"line_start":112,"line_end":112,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":60881,"byte_end":60891,"line_start":119,"line_end":119,"column_start":12,"column_end":22},"name":"try_select","qualname":"<Select>::try_select","value":"pub fn try_select(&mut Self) -> Option<ChannelId>","parent":null,"children":[],"decl_id":null,"docs":" Perform a select. If all channel operations are blocked, return `None`.\n (N.B. This will *never* subscribe to channels.)\n","sig":null,"attributes":[{"value":"/ Perform a select. If all channel operations are blocked, return `None`.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":60738,"byte_end":60813,"line_start":117,"line_end":117,"column_start":5,"column_end":80}},{"value":"/ (N.B. This will *never* subscribe to channels.)","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":60818,"byte_end":60869,"line_start":118,"line_end":118,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":64853,"byte_end":64857,"line_start":213,"line_end":213,"column_start":12,"column_end":16},"name":"send","qualname":"<Select>::send","value":"pub fn send<'s:'c, T>(&mut Self, &'s Sender<T>, T) -> SelectSendHandle","parent":null,"children":[],"decl_id":null,"docs":" Register a new send operation with the select.\n","sig":null,"attributes":[{"value":"/ Register a new send operation with the select.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":64791,"byte_end":64841,"line_start":212,"line_end":212,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":65689,"byte_end":65693,"line_start":239,"line_end":239,"column_start":12,"column_end":16},"name":"recv","qualname":"<Select>::recv","value":"pub fn recv<'r:'c, T>(&mut Self, &'r Receiver<T>) -> SelectRecvHandle","parent":null,"children":[],"decl_id":null,"docs":" Register a new receive operation with the select.\n","sig":null,"attributes":[{"value":"/ Register a new receive operation with the select.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":65624,"byte_end":65677,"line_start":238,"line_end":238,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":69371,"byte_end":69373,"line_start":365,"line_end":365,"column_start":12,"column_end":14},"name":"id","qualname":"<SelectSendHandle>::id","value":"pub fn id(&Self) -> ChannelId","parent":null,"children":[],"decl_id":null,"docs":" Return the id of the underlying channel.\n","sig":null,"attributes":[{"value":"/ Return the id of the underlying channel.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":69315,"byte_end":69359,"line_start":364,"line_end":364,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":69526,"byte_end":69528,"line_start":372,"line_end":372,"column_start":12,"column_end":14},"name":"id","qualname":"<SelectRecvHandle>::id","value":"pub fn id(&Self) -> ChannelId","parent":null,"children":[],"decl_id":null,"docs":" Return the id of the underlying channel.\n","sig":null,"attributes":[{"value":"/ Return the id of the underlying channel.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":69470,"byte_end":69514,"line_start":371,"line_end":371,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":223},"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":69698,"byte_end":69708,"line_start":379,"line_end":379,"column_start":12,"column_end":22},"name":"into_value","qualname":"<SelectRecvHandle>::into_value","value":"pub fn into_value(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Return the retrieved value.","sig":null,"attributes":[{"value":"/ Return the retrieved value.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":69585,"byte_end":69616,"line_start":376,"line_end":376,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":69621,"byte_end":69624,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ Panics if this channel was not chosen to synchronize.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":69629,"byte_end":69686,"line_start":378,"line_end":378,"column_start":5,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":435},"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":72069,"byte_end":72078,"line_start":32,"line_end":32,"column_start":12,"column_end":21},"name":"WaitGroup","qualname":"::wait_group::WaitGroup","value":"","parent":null,"children":[],"decl_id":null,"docs":" `WaitGroup` provides synchronization on the completion of threads.","sig":null,"attributes":[{"value":"/ `WaitGroup` provides synchronization on the completion of threads.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":71298,"byte_end":71368,"line_start":4,"line_end":4,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":71369,"byte_end":71372,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ For each thread involved in the synchronization, `add(1)` should be","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":71373,"byte_end":71444,"line_start":6,"line_end":6,"column_start":1,"column_end":72}},{"value":"/ called. Just before a thread terminates, it should call `done`.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":71445,"byte_end":71512,"line_start":7,"line_end":7,"column_start":1,"column_end":68}},{"value":"/ To synchronize, call `wait`, which will block until the number of `done`","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":71513,"byte_end":71589,"line_start":8,"line_end":8,"column_start":1,"column_end":77}},{"value":"/ calls corresponds to the number of `add(1)` calls.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":71590,"byte_end":71644,"line_start":9,"line_end":9,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":71645,"byte_end":71648,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":71649,"byte_end":71662,"line_start":11,"line_end":11,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":71663,"byte_end":71666,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":71667,"byte_end":71674,"line_start":13,"line_end":13,"column_start":1,"column_end":8}},{"value":"/ use std::thread;","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":71675,"byte_end":71695,"line_start":14,"line_end":14,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":71696,"byte_end":71699,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ let wg = chan::WaitGroup::new();","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":71700,"byte_end":71736,"line_start":16,"line_end":16,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":71737,"byte_end":71740,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ for _ in 0..4 {","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":71741,"byte_end":71760,"line_start":18,"line_end":18,"column_start":1,"column_end":20}},{"value":"/     wg.add(1);","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":71761,"byte_end":71779,"line_start":19,"line_end":19,"column_start":1,"column_end":19}},{"value":"/     let wg = wg.clone();","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":71780,"byte_end":71808,"line_start":20,"line_end":20,"column_start":1,"column_end":29}},{"value":"/     thread::spawn(move || {","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":71809,"byte_end":71840,"line_start":21,"line_end":21,"column_start":1,"column_end":32}},{"value":"/         // do some work.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":71841,"byte_end":71869,"line_start":22,"line_end":22,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":71870,"byte_end":71873,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/         // And now call done.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":71874,"byte_end":71907,"line_start":24,"line_end":24,"column_start":1,"column_end":34}},{"value":"/         wg.done();","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":71908,"byte_end":71930,"line_start":25,"line_end":25,"column_start":1,"column_end":23}},{"value":"/     });","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":71931,"byte_end":71942,"line_start":26,"line_end":26,"column_start":1,"column_end":12}},{"value":"/ }","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":71943,"byte_end":71948,"line_start":27,"line_end":27,"column_start":1,"column_end":6}},{"value":"/ // Blocks until `wg.done()` is called for each thread we spawned.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":71949,"byte_end":72018,"line_start":28,"line_end":28,"column_start":1,"column_end":70}},{"value":"/ wg.wait()","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":72019,"byte_end":72032,"line_start":29,"line_end":29,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":72033,"byte_end":72040,"line_start":30,"line_end":30,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":263},"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":72232,"byte_end":72235,"line_start":41,"line_end":41,"column_start":12,"column_end":15},"name":"new","qualname":"<WaitGroup>::new","value":"pub fn new() -> WaitGroup","parent":null,"children":[],"decl_id":null,"docs":" Create a new wait group.\n","sig":null,"attributes":[{"value":"/ Create a new wait group.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":72192,"byte_end":72220,"line_start":40,"line_end":40,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":72583,"byte_end":72586,"line_start":54,"line_end":54,"column_start":12,"column_end":15},"name":"add","qualname":"<WaitGroup>::add","value":"pub fn add(&Self, i32)","parent":null,"children":[],"decl_id":null,"docs":" Add a new thread to the waitgroup.","sig":null,"attributes":[{"value":"/ Add a new thread to the waitgroup.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":72388,"byte_end":72426,"line_start":48,"line_end":48,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":72431,"byte_end":72434,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ # Failure","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":72439,"byte_end":72452,"line_start":50,"line_end":50,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":72457,"byte_end":72460,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ If the internal count drops below `0` as a result of calling `add`,","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":72465,"byte_end":72536,"line_start":52,"line_end":52,"column_start":5,"column_end":76}},{"value":"/ then this function panics.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":72541,"byte_end":72571,"line_start":53,"line_end":53,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":265},"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":72870,"byte_end":72874,"line_start":64,"line_end":64,"column_start":12,"column_end":16},"name":"done","qualname":"<WaitGroup>::done","value":"pub fn done(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Mark a thread as having finished.","sig":null,"attributes":[{"value":"/ Mark a thread as having finished.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":72762,"byte_end":72799,"line_start":61,"line_end":61,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":72804,"byte_end":72807,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ (This is equivalent to calling `add(-1)`.)","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":72812,"byte_end":72858,"line_start":63,"line_end":63,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":73033,"byte_end":73037,"line_start":71,"line_end":71,"column_start":12,"column_end":16},"name":"wait","qualname":"<WaitGroup>::wait","value":"pub fn wait(&Self)","parent":null,"children":[],"decl_id":null,"docs":" Wait until all threads have completed.","sig":null,"attributes":[{"value":"/ Wait until all threads have completed.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":72917,"byte_end":72959,"line_start":68,"line_end":68,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":72964,"byte_end":72967,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ This unblocks when the internal count is `0`.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":72972,"byte_end":73021,"line_start":70,"line_end":70,"column_start":5,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":269},"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":15812,"byte_end":15816,"line_start":477,"line_end":477,"column_start":8,"column_end":12},"name":"sync","qualname":"::sync","value":"pub fn sync<T>(usize) -> (Sender<T>, Receiver<T>)","parent":null,"children":[],"decl_id":null,"docs":" Create a synchronous channel with a possibly empty buffer.","sig":null,"attributes":[{"value":"/ Create a synchronous channel with a possibly empty buffer.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":14042,"byte_end":14104,"line_start":430,"line_end":430,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":14105,"byte_end":14108,"line_start":431,"line_end":431,"column_start":1,"column_end":4}},{"value":"/ When the `size` is zero, the buffer is empty and the channel becomes a","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":14109,"byte_end":14183,"line_start":432,"line_end":432,"column_start":1,"column_end":75}},{"value":"/ rendezvous channel. A rendezvous channel blocks send operations until","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":14184,"byte_end":14257,"line_start":433,"line_end":433,"column_start":1,"column_end":74}},{"value":"/ a corresponding receive operation consumes the sent value.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":14258,"byte_end":14320,"line_start":434,"line_end":434,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":14321,"byte_end":14324,"line_start":435,"line_end":435,"column_start":1,"column_end":4}},{"value":"/ When the `size` is non-zero, the send operations will only block when the","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":14325,"byte_end":14402,"line_start":436,"line_end":436,"column_start":1,"column_end":78}},{"value":"/ buffer is full. Send operations only unblock when a receive operation","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":14403,"byte_end":14476,"line_start":437,"line_end":437,"column_start":1,"column_end":74}},{"value":"/ removes an element from the buffer.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":14477,"byte_end":14516,"line_start":438,"line_end":438,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":14517,"byte_end":14520,"line_start":439,"line_end":439,"column_start":1,"column_end":4}},{"value":"/ Values are guaranteed to be received in the same order that they are sent.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":14521,"byte_end":14599,"line_start":440,"line_end":440,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":14600,"byte_end":14603,"line_start":441,"line_end":441,"column_start":1,"column_end":4}},{"value":"/ The send and receive values returned can be cloned arbitrarily (i.e.,","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":14604,"byte_end":14677,"line_start":442,"line_end":442,"column_start":1,"column_end":74}},{"value":"/ multi-producer/multi-consumer) and moved to other threads.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":14678,"byte_end":14740,"line_start":443,"line_end":443,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":14741,"byte_end":14744,"line_start":444,"line_end":444,"column_start":1,"column_end":4}},{"value":"/ When all senders are dropped, the channel is closed automatically. No","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":14745,"byte_end":14818,"line_start":445,"line_end":445,"column_start":1,"column_end":74}},{"value":"/ more values may be sent on a closed channel. Once a channel is closed and","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":14819,"byte_end":14896,"line_start":446,"line_end":446,"column_start":1,"column_end":78}},{"value":"/ the buffer is empty, all receive operations return `None` immediately.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":14897,"byte_end":14971,"line_start":447,"line_end":447,"column_start":1,"column_end":75}},{"value":"/ (If a channel is closed and there are still values in the buffer, then","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":14972,"byte_end":15046,"line_start":448,"line_end":448,"column_start":1,"column_end":75}},{"value":"/ receive operations will retrieve those first.)","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":15047,"byte_end":15097,"line_start":449,"line_end":449,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":15098,"byte_end":15101,"line_start":450,"line_end":450,"column_start":1,"column_end":4}},{"value":"/ When all receivers are dropped, no special action is taken. When the buffer","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":15102,"byte_end":15181,"line_start":451,"line_end":451,"column_start":1,"column_end":80}},{"value":"/ is full, all subsequent send operations will block indefinitely.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":15182,"byte_end":15250,"line_start":452,"line_end":452,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":15251,"byte_end":15254,"line_start":453,"line_end":453,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":15255,"byte_end":15269,"line_start":454,"line_end":454,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":15270,"byte_end":15273,"line_start":455,"line_end":455,"column_start":1,"column_end":4}},{"value":"/ An example of a rendezvous channel:","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":15274,"byte_end":15313,"line_start":456,"line_end":456,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":15314,"byte_end":15317,"line_start":457,"line_end":457,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":15318,"byte_end":15325,"line_start":458,"line_end":458,"column_start":1,"column_end":8}},{"value":"/ use std::thread;","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":15326,"byte_end":15346,"line_start":459,"line_end":459,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":15347,"byte_end":15350,"line_start":460,"line_end":460,"column_start":1,"column_end":4}},{"value":"/ let (send, recv) = chan::sync(0);","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":15351,"byte_end":15388,"line_start":461,"line_end":461,"column_start":1,"column_end":38}},{"value":"/ thread::spawn(move || send.send(5));","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":15389,"byte_end":15429,"line_start":462,"line_end":462,"column_start":1,"column_end":41}},{"value":"/ assert_eq!(recv.recv(), Some(5)); // blocks until the previous send occurs","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":15430,"byte_end":15508,"line_start":463,"line_end":463,"column_start":1,"column_end":79}},{"value":"/ ```","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":15509,"byte_end":15516,"line_start":464,"line_end":464,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":15517,"byte_end":15520,"line_start":465,"line_end":465,"column_start":1,"column_end":4}},{"value":"/ An example of a synchronous buffered channel:","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":15521,"byte_end":15570,"line_start":466,"line_end":466,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":15571,"byte_end":15574,"line_start":467,"line_end":467,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":15575,"byte_end":15582,"line_start":468,"line_end":468,"column_start":1,"column_end":8}},{"value":"/ let (send, recv) = chan::sync(1);","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":15583,"byte_end":15620,"line_start":469,"line_end":469,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":15621,"byte_end":15624,"line_start":470,"line_end":470,"column_start":1,"column_end":4}},{"value":"/ send.send(5); // doesn't block because of the buffer","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":15625,"byte_end":15681,"line_start":471,"line_end":471,"column_start":1,"column_end":57}},{"value":"/ assert_eq!(recv.recv(), Some(5));","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":15682,"byte_end":15719,"line_start":472,"line_end":472,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":15720,"byte_end":15723,"line_start":473,"line_end":473,"column_start":1,"column_end":4}},{"value":"/ drop(send); // closes the channel","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":15724,"byte_end":15761,"line_start":474,"line_end":474,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(recv.recv(), None);","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":15762,"byte_end":15796,"line_start":475,"line_end":475,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":15797,"byte_end":15804,"line_start":476,"line_end":476,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":271},"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":17449,"byte_end":17454,"line_start":523,"line_end":523,"column_start":8,"column_end":13},"name":"async","qualname":"::async","value":"pub fn async<T>() -> (Sender<T>, Receiver<T>)","parent":null,"children":[],"decl_id":null,"docs":" Create an asynchronous channel with an unbounded buffer.","sig":null,"attributes":[{"value":"/ Create an asynchronous channel with an unbounded buffer.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":15984,"byte_end":16044,"line_start":483,"line_end":483,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":16045,"byte_end":16048,"line_start":484,"line_end":484,"column_start":1,"column_end":4}},{"value":"/ Since the buffer is unbounded, send operations always succeed immediately.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":16049,"byte_end":16127,"line_start":485,"line_end":485,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":16128,"byte_end":16131,"line_start":486,"line_end":486,"column_start":1,"column_end":4}},{"value":"/ Receive operations succeed only when there is at least one value in the","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":16132,"byte_end":16207,"line_start":487,"line_end":487,"column_start":1,"column_end":76}},{"value":"/ buffer.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":16208,"byte_end":16219,"line_start":488,"line_end":488,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":16220,"byte_end":16223,"line_start":489,"line_end":489,"column_start":1,"column_end":4}},{"value":"/ Values are guaranteed to be received in the same order that they are sent.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":16224,"byte_end":16302,"line_start":490,"line_end":490,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":16303,"byte_end":16306,"line_start":491,"line_end":491,"column_start":1,"column_end":4}},{"value":"/ The send and receive values returned can be cloned arbitrarily (i.e.,","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":16307,"byte_end":16380,"line_start":492,"line_end":492,"column_start":1,"column_end":74}},{"value":"/ multi-producer/multi-consumer) and moved to other threads.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":16381,"byte_end":16443,"line_start":493,"line_end":493,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":16444,"byte_end":16447,"line_start":494,"line_end":494,"column_start":1,"column_end":4}},{"value":"/ When all senders are dropped, the channel is closed automatically. No","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":16448,"byte_end":16521,"line_start":495,"line_end":495,"column_start":1,"column_end":74}},{"value":"/ more values may be sent on a closed channel. Once a channel is closed and","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":16522,"byte_end":16599,"line_start":496,"line_end":496,"column_start":1,"column_end":78}},{"value":"/ the buffer is empty, all receive operations return `None` immediately.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":16600,"byte_end":16674,"line_start":497,"line_end":497,"column_start":1,"column_end":75}},{"value":"/ (If a channel is closed and there are still values in the buffer, then","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":16675,"byte_end":16749,"line_start":498,"line_end":498,"column_start":1,"column_end":75}},{"value":"/ receive operations will retrieve those first.)","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":16750,"byte_end":16800,"line_start":499,"line_end":499,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":16801,"byte_end":16804,"line_start":500,"line_end":500,"column_start":1,"column_end":4}},{"value":"/ When all receivers are dropped, no special action is taken. When the buffer","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":16805,"byte_end":16884,"line_start":501,"line_end":501,"column_start":1,"column_end":80}},{"value":"/ is full, all subsequent send operations will block indefinitely.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":16885,"byte_end":16953,"line_start":502,"line_end":502,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":16954,"byte_end":16957,"line_start":503,"line_end":503,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":16958,"byte_end":16971,"line_start":504,"line_end":504,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":16972,"byte_end":16975,"line_start":505,"line_end":505,"column_start":1,"column_end":4}},{"value":"/ Asynchronous channels are nice when you just want to enqueue a bunch","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":16976,"byte_end":17048,"line_start":506,"line_end":506,"column_start":1,"column_end":73}},{"value":"/ of values up front:","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":17049,"byte_end":17072,"line_start":507,"line_end":507,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":17073,"byte_end":17076,"line_start":508,"line_end":508,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":17077,"byte_end":17084,"line_start":509,"line_end":509,"column_start":1,"column_end":8}},{"value":"/ let (s, r) = chan::async();","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":17085,"byte_end":17116,"line_start":510,"line_end":510,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":17117,"byte_end":17120,"line_start":511,"line_end":511,"column_start":1,"column_end":4}},{"value":"/ for i in 0..10 {","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":17121,"byte_end":17141,"line_start":512,"line_end":512,"column_start":1,"column_end":21}},{"value":"/     s.send(i);","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":17142,"byte_end":17160,"line_start":513,"line_end":513,"column_start":1,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":17161,"byte_end":17166,"line_start":514,"line_end":514,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":17167,"byte_end":17170,"line_start":515,"line_end":515,"column_start":1,"column_end":4}},{"value":"/ drop(s); // closing the channel lets the iterator stop","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":17171,"byte_end":17229,"line_start":516,"line_end":516,"column_start":1,"column_end":59}},{"value":"/ let numbers: Vec<i32> = r.iter().collect();","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":17230,"byte_end":17277,"line_start":517,"line_end":517,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(numbers, (0..10).collect::<Vec<i32>>());","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":17278,"byte_end":17333,"line_start":518,"line_end":518,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":17334,"byte_end":17341,"line_start":519,"line_end":519,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":17342,"byte_end":17345,"line_start":520,"line_end":520,"column_start":1,"column_end":4}},{"value":"/ (Others should help me come up with more compelling examples of","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":17346,"byte_end":17413,"line_start":521,"line_end":521,"column_start":1,"column_end":68}},{"value":"/ asynchronous channels.)","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":17414,"byte_end":17441,"line_start":522,"line_end":522,"column_start":1,"column_end":28}}]},{"kind":"Function","id":{"krate":0,"index":273},"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":17967,"byte_end":17972,"line_start":543,"line_end":543,"column_start":8,"column_end":13},"name":"after","qualname":"::after","value":"pub fn after(Duration) -> Receiver<()>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new rendezvous channel that is dropped after a timeout.","sig":null,"attributes":[{"value":"/ Creates a new rendezvous channel that is dropped after a timeout.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":17607,"byte_end":17676,"line_start":529,"line_end":529,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":17677,"byte_end":17680,"line_start":530,"line_end":530,"column_start":1,"column_end":4}},{"value":"/ When the channel is dropped, any receive operation on the returned channel","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":17681,"byte_end":17759,"line_start":531,"line_end":531,"column_start":1,"column_end":79}},{"value":"/ will be unblocked.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":17760,"byte_end":17782,"line_start":532,"line_end":532,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":17783,"byte_end":17786,"line_start":533,"line_end":533,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":17787,"byte_end":17800,"line_start":534,"line_end":534,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":17801,"byte_end":17804,"line_start":535,"line_end":535,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":17805,"byte_end":17812,"line_start":536,"line_end":536,"column_start":1,"column_end":8}},{"value":"/ use std::time::Duration;","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":17813,"byte_end":17841,"line_start":537,"line_end":537,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":17842,"byte_end":17845,"line_start":538,"line_end":538,"column_start":1,"column_end":4}},{"value":"/ let wait = chan::after(Duration::from_millis(1000));","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":17846,"byte_end":17902,"line_start":539,"line_end":539,"column_start":1,"column_end":57}},{"value":"/ // Unblocks after 1 second.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":17903,"byte_end":17934,"line_start":540,"line_end":540,"column_start":1,"column_end":32}},{"value":"/ wait.recv();","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":17935,"byte_end":17951,"line_start":541,"line_end":541,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":17952,"byte_end":17959,"line_start":542,"line_end":542,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":275},"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":18584,"byte_end":18592,"line_start":568,"line_end":568,"column_start":8,"column_end":16},"name":"after_ms","qualname":"::after_ms","value":"pub fn after_ms(u32) -> Receiver<()>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new rendezvous channel that is dropped after a timeout.","sig":null,"attributes":[{"value":"/ Creates a new rendezvous channel that is dropped after a timeout.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":18144,"byte_end":18213,"line_start":552,"line_end":552,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":18214,"byte_end":18217,"line_start":553,"line_end":553,"column_start":1,"column_end":4}},{"value":"/ `duration` is specified in milliseconds.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":18218,"byte_end":18262,"line_start":554,"line_end":554,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":18263,"byte_end":18266,"line_start":555,"line_end":555,"column_start":1,"column_end":4}},{"value":"/ When the channel is dropped, any receive operation on the returned channel","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":18267,"byte_end":18345,"line_start":556,"line_end":556,"column_start":1,"column_end":79}},{"value":"/ will be unblocked.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":18346,"byte_end":18368,"line_start":557,"line_end":557,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":18369,"byte_end":18372,"line_start":558,"line_end":558,"column_start":1,"column_end":4}},{"value":"/ N.B. This will eventually be deprecated when we get a proper duration type.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":18373,"byte_end":18452,"line_start":559,"line_end":559,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":18453,"byte_end":18456,"line_start":560,"line_end":560,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":18457,"byte_end":18470,"line_start":561,"line_end":561,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":18471,"byte_end":18474,"line_start":562,"line_end":562,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":18475,"byte_end":18482,"line_start":563,"line_end":563,"column_start":1,"column_end":8}},{"value":"/ let wait = chan::after_ms(1000);","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":18483,"byte_end":18519,"line_start":564,"line_end":564,"column_start":1,"column_end":37}},{"value":"/ // Unblocks after 1 second.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":18520,"byte_end":18551,"line_start":565,"line_end":565,"column_start":1,"column_end":32}},{"value":"/ wait.recv();","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":18552,"byte_end":18568,"line_start":566,"line_end":566,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":18569,"byte_end":18576,"line_start":567,"line_end":567,"column_start":1,"column_end":8}},{"value":"allow(deprecated)","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":18630,"byte_end":18651,"line_start":569,"line_end":569,"column_start":5,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":277},"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":20305,"byte_end":20309,"line_start":619,"line_end":619,"column_start":8,"column_end":12},"name":"tick","qualname":"::tick","value":"pub fn tick(Duration) -> Receiver<Sender<()>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new rendezvous channel that is \"ticked\" every duration.","sig":null,"attributes":[{"value":"/ Creates a new rendezvous channel that is \"ticked\" every duration.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":18788,"byte_end":18857,"line_start":578,"line_end":578,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":18858,"byte_end":18861,"line_start":579,"line_end":579,"column_start":1,"column_end":4}},{"value":"/ When `duration` is `0`, no ticks are ever sent.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":18862,"byte_end":18913,"line_start":580,"line_end":580,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":18914,"byte_end":18917,"line_start":581,"line_end":581,"column_start":1,"column_end":4}},{"value":"/ When `duration` is non-zero, then a new channel is created and sent at","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":18918,"byte_end":18992,"line_start":582,"line_end":582,"column_start":1,"column_end":75}},{"value":"/ every duration. When the sent channel is dropped, the timer is reset","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":18993,"byte_end":19065,"line_start":583,"line_end":583,"column_start":1,"column_end":73}},{"value":"/ and the process repeats after the duration.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":19066,"byte_end":19113,"line_start":584,"line_end":584,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":19114,"byte_end":19117,"line_start":585,"line_end":585,"column_start":1,"column_end":4}},{"value":"/ This is especially convenient because it keeps the ticking in sync with","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":19118,"byte_end":19193,"line_start":586,"line_end":586,"column_start":1,"column_end":76}},{"value":"/ the code that uses it. Namely, the ticks won't \"build up.\"","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":19194,"byte_end":19256,"line_start":587,"line_end":587,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":19257,"byte_end":19260,"line_start":588,"line_end":588,"column_start":1,"column_end":4}},{"value":"/ N.B. There is no way to reclaim the resources used by this function.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":19261,"byte_end":19333,"line_start":589,"line_end":589,"column_start":1,"column_end":73}},{"value":"/ If you stop receiving on the channel returned, then the thread spawned by","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":19334,"byte_end":19411,"line_start":590,"line_end":590,"column_start":1,"column_end":78}},{"value":"/ `tick_ms` will block indefinitely.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":19412,"byte_end":19450,"line_start":591,"line_end":591,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":19451,"byte_end":19454,"line_start":592,"line_end":592,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":19455,"byte_end":19469,"line_start":593,"line_end":593,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":19470,"byte_end":19473,"line_start":594,"line_end":594,"column_start":1,"column_end":4}},{"value":"/ This is most useful when used in `chan_select!` because the received","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":19474,"byte_end":19546,"line_start":595,"line_end":595,"column_start":1,"column_end":73}},{"value":"/ sentinel channel gets dropped only after the correspond arm has","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":19547,"byte_end":19614,"line_start":596,"line_end":596,"column_start":1,"column_end":68}},{"value":"/ executed. At which point, the ticker is reset and waits to tick until","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":19615,"byte_end":19688,"line_start":597,"line_end":597,"column_start":1,"column_end":74}},{"value":"/ `duration` milliseconds lapses *after* the `chan_select!` arm is executed.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":19689,"byte_end":19767,"line_start":598,"line_end":598,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":19768,"byte_end":19771,"line_start":599,"line_end":599,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":19772,"byte_end":19779,"line_start":600,"line_end":600,"column_start":1,"column_end":8}},{"value":"/ # #[macro_use] extern crate chan; fn main() {","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":19780,"byte_end":19829,"line_start":601,"line_end":601,"column_start":1,"column_end":50}},{"value":"/ use std::thread;","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":19830,"byte_end":19850,"line_start":602,"line_end":602,"column_start":1,"column_end":21}},{"value":"/ use std::time::Duration;","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":19851,"byte_end":19879,"line_start":603,"line_end":603,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":19880,"byte_end":19883,"line_start":604,"line_end":604,"column_start":1,"column_end":4}},{"value":"/ let tick = chan::tick(Duration::from_millis(100));","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":19884,"byte_end":19938,"line_start":605,"line_end":605,"column_start":1,"column_end":55}},{"value":"/ let boom = chan::after(Duration::from_millis(500));","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":19939,"byte_end":19994,"line_start":606,"line_end":606,"column_start":1,"column_end":56}},{"value":"/ loop {","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":19995,"byte_end":20005,"line_start":607,"line_end":607,"column_start":1,"column_end":11}},{"value":"/     chan_select! {","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":20006,"byte_end":20028,"line_start":608,"line_end":608,"column_start":1,"column_end":23}},{"value":"/         default => {","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":20029,"byte_end":20053,"line_start":609,"line_end":609,"column_start":1,"column_end":25}},{"value":"/             println!(\"   .\");","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":20054,"byte_end":20087,"line_start":610,"line_end":610,"column_start":1,"column_end":34}},{"value":"/             thread::sleep(Duration::from_millis(50));","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":20088,"byte_end":20145,"line_start":611,"line_end":611,"column_start":1,"column_end":58}},{"value":"/         },","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":20146,"byte_end":20160,"line_start":612,"line_end":612,"column_start":1,"column_end":15}},{"value":"/         tick.recv() => println!(\"tick.\"),","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":20161,"byte_end":20206,"line_start":613,"line_end":613,"column_start":1,"column_end":46}},{"value":"/         boom.recv() => { println!(\"BOOM!\"); return; },","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":20207,"byte_end":20265,"line_start":614,"line_end":614,"column_start":1,"column_end":59}},{"value":"/     }","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":20266,"byte_end":20275,"line_start":615,"line_end":615,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":20276,"byte_end":20281,"line_start":616,"line_end":616,"column_start":1,"column_end":6}},{"value":"/ # }","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":20282,"byte_end":20289,"line_start":617,"line_end":617,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":20290,"byte_end":20297,"line_start":618,"line_end":618,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":279},"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":22442,"byte_end":22449,"line_start":682,"line_end":682,"column_start":8,"column_end":15},"name":"tick_ms","qualname":"::tick_ms","value":"pub fn tick_ms(u32) -> Receiver<Sender<()>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new rendezvous channel that is \"ticked\" every duration.","sig":null,"attributes":[{"value":"/ Creates a new rendezvous channel that is \"ticked\" every duration.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":20916,"byte_end":20985,"line_start":639,"line_end":639,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":20986,"byte_end":20989,"line_start":640,"line_end":640,"column_start":1,"column_end":4}},{"value":"/ `duration` is specified in milliseconds.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":20990,"byte_end":21034,"line_start":641,"line_end":641,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":21035,"byte_end":21038,"line_start":642,"line_end":642,"column_start":1,"column_end":4}},{"value":"/ When `duration` is `0`, no ticks are ever sent.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":21039,"byte_end":21090,"line_start":643,"line_end":643,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":21091,"byte_end":21094,"line_start":644,"line_end":644,"column_start":1,"column_end":4}},{"value":"/ When `duration` is non-zero, then a new channel is created and sent at","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":21095,"byte_end":21169,"line_start":645,"line_end":645,"column_start":1,"column_end":75}},{"value":"/ every duration. When the sent channel is dropped, the timer is reset","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":21170,"byte_end":21242,"line_start":646,"line_end":646,"column_start":1,"column_end":73}},{"value":"/ and the process repeats after the duration.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":21243,"byte_end":21290,"line_start":647,"line_end":647,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":21291,"byte_end":21294,"line_start":648,"line_end":648,"column_start":1,"column_end":4}},{"value":"/ This is especially convenient because it keeps the ticking in sync with","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":21295,"byte_end":21370,"line_start":649,"line_end":649,"column_start":1,"column_end":76}},{"value":"/ the code that uses it. Namely, the ticks won't \"build up.\"","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":21371,"byte_end":21433,"line_start":650,"line_end":650,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":21434,"byte_end":21437,"line_start":651,"line_end":651,"column_start":1,"column_end":4}},{"value":"/ N.B. There is no way to reclaim the resources used by this function.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":21438,"byte_end":21510,"line_start":652,"line_end":652,"column_start":1,"column_end":73}},{"value":"/ If you stop receiving on the channel returned, then the thread spawned by","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":21511,"byte_end":21588,"line_start":653,"line_end":653,"column_start":1,"column_end":78}},{"value":"/ `tick_ms` will block indefinitely.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":21589,"byte_end":21627,"line_start":654,"line_end":654,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":21628,"byte_end":21631,"line_start":655,"line_end":655,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":21632,"byte_end":21646,"line_start":656,"line_end":656,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":21647,"byte_end":21650,"line_start":657,"line_end":657,"column_start":1,"column_end":4}},{"value":"/ This is most useful when used in `chan_select!` because the received","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":21651,"byte_end":21723,"line_start":658,"line_end":658,"column_start":1,"column_end":73}},{"value":"/ sentinel channel gets dropped only after the correspond arm has","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":21724,"byte_end":21791,"line_start":659,"line_end":659,"column_start":1,"column_end":68}},{"value":"/ executed. At which point, the ticker is reset and waits to tick until","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":21792,"byte_end":21865,"line_start":660,"line_end":660,"column_start":1,"column_end":74}},{"value":"/ `duration` milliseconds lapses *after* the `chan_select!` arm is executed.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":21866,"byte_end":21944,"line_start":661,"line_end":661,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":21945,"byte_end":21948,"line_start":662,"line_end":662,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":21949,"byte_end":21956,"line_start":663,"line_end":663,"column_start":1,"column_end":8}},{"value":"/ # #[macro_use] extern crate chan; fn main() {","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":21957,"byte_end":22006,"line_start":664,"line_end":664,"column_start":1,"column_end":50}},{"value":"/ use std::thread;","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":22007,"byte_end":22027,"line_start":665,"line_end":665,"column_start":1,"column_end":21}},{"value":"/ use std::time::Duration;","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":22028,"byte_end":22056,"line_start":666,"line_end":666,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":22057,"byte_end":22060,"line_start":667,"line_end":667,"column_start":1,"column_end":4}},{"value":"/ let tick = chan::tick_ms(100);","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":22061,"byte_end":22095,"line_start":668,"line_end":668,"column_start":1,"column_end":35}},{"value":"/ let boom = chan::after_ms(500);","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":22096,"byte_end":22131,"line_start":669,"line_end":669,"column_start":1,"column_end":36}},{"value":"/ loop {","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":22132,"byte_end":22142,"line_start":670,"line_end":670,"column_start":1,"column_end":11}},{"value":"/     chan_select! {","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":22143,"byte_end":22165,"line_start":671,"line_end":671,"column_start":1,"column_end":23}},{"value":"/         default => {","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":22166,"byte_end":22190,"line_start":672,"line_end":672,"column_start":1,"column_end":25}},{"value":"/             println!(\"   .\");","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":22191,"byte_end":22224,"line_start":673,"line_end":673,"column_start":1,"column_end":34}},{"value":"/             thread::sleep(Duration::from_millis(50));","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":22225,"byte_end":22282,"line_start":674,"line_end":674,"column_start":1,"column_end":58}},{"value":"/         },","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":22283,"byte_end":22297,"line_start":675,"line_end":675,"column_start":1,"column_end":15}},{"value":"/         tick.recv() => println!(\"tick.\"),","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":22298,"byte_end":22343,"line_start":676,"line_end":676,"column_start":1,"column_end":46}},{"value":"/         boom.recv() => { println!(\"BOOM!\"); return; },","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":22344,"byte_end":22402,"line_start":677,"line_end":677,"column_start":1,"column_end":59}},{"value":"/     }","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":22403,"byte_end":22412,"line_start":678,"line_end":678,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":22413,"byte_end":22418,"line_start":679,"line_end":679,"column_start":1,"column_end":6}},{"value":"/ # }","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":22419,"byte_end":22426,"line_start":680,"line_end":680,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":22427,"byte_end":22434,"line_start":681,"line_end":681,"column_start":1,"column_end":8}},{"value":"allow(deprecated)","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":22495,"byte_end":22516,"line_start":683,"line_end":683,"column_start":5,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":440},"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":23292,"byte_end":23301,"line_start":709,"line_end":709,"column_start":12,"column_end":21},"name":"ChannelId","qualname":"::ChannelId","value":"","parent":null,"children":[],"decl_id":null,"docs":" A value that uniquely identifies one half of a channel.","sig":null,"attributes":[{"value":"/ A value that uniquely identifies one half of a channel.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":23038,"byte_end":23097,"line_start":703,"line_end":703,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":23098,"byte_end":23101,"line_start":704,"line_end":704,"column_start":1,"column_end":4}},{"value":"/ For any `s: Sender<T>`, `s.id() == s.clone().id()`. Similarly for","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":23102,"byte_end":23171,"line_start":705,"line_end":705,"column_start":1,"column_end":70}},{"value":"/ any `r: Receiver<T>`.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":23172,"byte_end":23197,"line_start":706,"line_end":706,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":284},"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":23700,"byte_end":23704,"line_start":728,"line_end":728,"column_start":12,"column_end":16},"name":"Iter","qualname":"::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":286}],"decl_id":null,"docs":" An iterator over values received in a channel.\n","sig":null,"attributes":[{"value":"/ An iterator over values received in a channel.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":23638,"byte_end":23688,"line_start":727,"line_end":727,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":488},"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":24744,"byte_end":24750,"line_start":762,"line_end":762,"column_start":12,"column_end":18},"name":"Sender","qualname":"::Sender","value":"","parent":null,"children":[],"decl_id":null,"docs":" The sending half of a channel.","sig":null,"attributes":[{"value":"/ The sending half of a channel.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":24142,"byte_end":24176,"line_start":749,"line_end":749,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":24177,"byte_end":24180,"line_start":750,"line_end":750,"column_start":1,"column_end":4}},{"value":"/ Senders can be cloned any number of times and sent to other threads.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":24181,"byte_end":24253,"line_start":751,"line_end":751,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":24254,"byte_end":24257,"line_start":752,"line_end":752,"column_start":1,"column_end":4}},{"value":"/ Senders also implement `Sync`, which means they can be shared among threads","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":24258,"byte_end":24337,"line_start":753,"line_end":753,"column_start":1,"column_end":80}},{"value":"/ without cloning if the channels can be proven to outlive the execution","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":24338,"byte_end":24412,"line_start":754,"line_end":754,"column_start":1,"column_end":75}},{"value":"/ of the threads.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":24413,"byte_end":24432,"line_start":755,"line_end":755,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":24433,"byte_end":24436,"line_start":756,"line_end":756,"column_start":1,"column_end":4}},{"value":"/ When all sending halves of a channel are dropped, the channel is closed","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":24437,"byte_end":24512,"line_start":757,"line_end":757,"column_start":1,"column_end":76}},{"value":"/ automatically. When a channel is closed, no new values can be sent on the","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":24513,"byte_end":24590,"line_start":758,"line_end":758,"column_start":1,"column_end":78}},{"value":"/ channel. Also, all receive operations either return any values left in the","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":24591,"byte_end":24669,"line_start":759,"line_end":759,"column_start":1,"column_end":79}},{"value":"/ buffer or return immediately with `None`.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":24670,"byte_end":24715,"line_start":760,"line_end":760,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":495},"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":25262,"byte_end":25270,"line_start":776,"line_end":776,"column_start":12,"column_end":20},"name":"Receiver","qualname":"::Receiver","value":"","parent":null,"children":[],"decl_id":null,"docs":" The receiving half of a channel.","sig":null,"attributes":[{"value":"/ The receiving half of a channel.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":24768,"byte_end":24804,"line_start":764,"line_end":764,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":24805,"byte_end":24808,"line_start":765,"line_end":765,"column_start":1,"column_end":4}},{"value":"/ Receivers can be cloned any number of times and sent to other threads.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":24809,"byte_end":24883,"line_start":766,"line_end":766,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":24884,"byte_end":24887,"line_start":767,"line_end":767,"column_start":1,"column_end":4}},{"value":"/ Receivers also implement `Sync`, which means they can be shared among","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":24888,"byte_end":24961,"line_start":768,"line_end":768,"column_start":1,"column_end":74}},{"value":"/ threads without cloning if the channels can be proven to outlive the","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":24962,"byte_end":25034,"line_start":769,"line_end":769,"column_start":1,"column_end":73}},{"value":"/ execution of the threads.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":25035,"byte_end":25064,"line_start":770,"line_end":770,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":25065,"byte_end":25068,"line_start":771,"line_end":771,"column_start":1,"column_end":4}},{"value":"/ When all receiving halves of a channel are dropped, no special action is","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":25069,"byte_end":25145,"line_start":772,"line_end":772,"column_start":1,"column_end":77}},{"value":"/ taken. If the buffer in the channel is full, all sends will block","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":25146,"byte_end":25215,"line_start":773,"line_end":773,"column_start":1,"column_end":70}},{"value":"/ indefinitely.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":25216,"byte_end":25233,"line_start":774,"line_end":774,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":28489,"byte_end":28493,"line_start":886,"line_end":886,"column_start":12,"column_end":16},"name":"send","qualname":"<Sender<T>>::send","value":"pub fn send(&Self, T)","parent":null,"children":[],"decl_id":null,"docs":" Send a value on this channel.","sig":null,"attributes":[{"value":"/ Send a value on this channel.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":27981,"byte_end":28014,"line_start":872,"line_end":872,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":28019,"byte_end":28022,"line_start":873,"line_end":873,"column_start":5,"column_end":8}},{"value":"/ If this is an asnychronous channel, `send` never blocks.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":28027,"byte_end":28087,"line_start":874,"line_end":874,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":28092,"byte_end":28095,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ If this is a synchronous channel, `send` only blocks when the buffer","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":28100,"byte_end":28172,"line_start":876,"line_end":876,"column_start":5,"column_end":77}},{"value":"/ is full.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":28177,"byte_end":28189,"line_start":877,"line_end":877,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":28194,"byte_end":28197,"line_start":878,"line_end":878,"column_start":5,"column_end":8}},{"value":"/ If this is a rendezvous channel, `send` blocks until a corresponding","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":28202,"byte_end":28274,"line_start":879,"line_end":879,"column_start":5,"column_end":77}},{"value":"/ `recv` retrieves `val`.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":28279,"byte_end":28306,"line_start":880,"line_end":880,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":28311,"byte_end":28314,"line_start":881,"line_end":881,"column_start":5,"column_end":8}},{"value":"/ Values are guaranteed to be received in the same order that they","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":28319,"byte_end":28387,"line_start":882,"line_end":882,"column_start":5,"column_end":73}},{"value":"/ are sent.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":28392,"byte_end":28405,"line_start":883,"line_end":883,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":28410,"byte_end":28413,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ This operation will never `panic!` but it can deadlock.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":28418,"byte_end":28477,"line_start":885,"line_end":885,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":30193,"byte_end":30197,"line_start":942,"line_end":942,"column_start":12,"column_end":16},"name":"recv","qualname":"<Receiver<T>>::recv","value":"pub fn recv(&Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Receive a value on this channel.","sig":null,"attributes":[{"value":"/ Receive a value on this channel.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":29361,"byte_end":29397,"line_start":921,"line_end":921,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":29402,"byte_end":29405,"line_start":922,"line_end":922,"column_start":5,"column_end":8}},{"value":"/ If this is an asnychronous channel, `recv` only blocks when the","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":29410,"byte_end":29477,"line_start":923,"line_end":923,"column_start":5,"column_end":72}},{"value":"/ buffer is empty.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":29482,"byte_end":29502,"line_start":924,"line_end":924,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":29507,"byte_end":29510,"line_start":925,"line_end":925,"column_start":5,"column_end":8}},{"value":"/ If this is a synchronous channel, `recv` only blocks when the buffer","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":29515,"byte_end":29587,"line_start":926,"line_end":926,"column_start":5,"column_end":77}},{"value":"/ is empty.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":29592,"byte_end":29605,"line_start":927,"line_end":927,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":29610,"byte_end":29613,"line_start":928,"line_end":928,"column_start":5,"column_end":8}},{"value":"/ If this is a rendezvous channel, `recv` blocks until a corresponding","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":29618,"byte_end":29690,"line_start":929,"line_end":929,"column_start":5,"column_end":77}},{"value":"/ `send` sends a value.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":29695,"byte_end":29720,"line_start":930,"line_end":930,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":29725,"byte_end":29728,"line_start":931,"line_end":931,"column_start":5,"column_end":8}},{"value":"/ For all channels, if the channel is closed and the buffer is empty,","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":29733,"byte_end":29804,"line_start":932,"line_end":932,"column_start":5,"column_end":76}},{"value":"/ then `recv` always and immediately returns `None`. (If the buffer is","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":29809,"byte_end":29881,"line_start":933,"line_end":933,"column_start":5,"column_end":77}},{"value":"/ non-empty on a closed channel, then values from the buffer are","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":29886,"byte_end":29952,"line_start":934,"line_end":934,"column_start":5,"column_end":71}},{"value":"/ returned.)","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":29957,"byte_end":29971,"line_start":935,"line_end":935,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":29976,"byte_end":29979,"line_start":936,"line_end":936,"column_start":5,"column_end":8}},{"value":"/ Values are guaranteed to be received in the same order that they","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":29984,"byte_end":30052,"line_start":937,"line_end":937,"column_start":5,"column_end":73}},{"value":"/ are sent.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":30057,"byte_end":30070,"line_start":938,"line_end":938,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":30075,"byte_end":30078,"line_start":939,"line_end":939,"column_start":5,"column_end":8}},{"value":"/ This operation will never `panic!` but it can deadlock if the channel","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":30083,"byte_end":30156,"line_start":940,"line_end":940,"column_start":5,"column_end":78}},{"value":"/ is never closed.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":30161,"byte_end":30181,"line_start":941,"line_end":941,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":30750,"byte_end":30754,"line_start":962,"line_end":962,"column_start":12,"column_end":16},"name":"iter","qualname":"<Receiver<T>>::iter","value":"pub fn iter(&Self) -> Iter<T>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator for receiving values on this channel.","sig":null,"attributes":[{"value":"/ Return an iterator for receiving values on this channel.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":30573,"byte_end":30633,"line_start":958,"line_end":958,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":30638,"byte_end":30641,"line_start":959,"line_end":959,"column_start":5,"column_end":8}},{"value":"/ This iterator yields values (blocking if necessary) until the channel","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":30646,"byte_end":30719,"line_start":960,"line_end":960,"column_start":5,"column_end":78}},{"value":"/ is closed.","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":30724,"byte_end":30738,"line_start":961,"line_end":961,"column_start":5,"column_end":19}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/notifier.rs","byte_start":55559,"byte_end":55567,"line_start":33,"line_end":33,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/notifier.rs","byte_start":56651,"byte_end":56659,"line_start":76,"line_end":76,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":60126,"byte_end":60132,"line_start":95,"line_end":95,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":188},{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":66550,"byte_end":66556,"line_start":265,"line_end":265,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":66711,"byte_end":66721,"line_start":273,"line_end":273,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":68054,"byte_end":68064,"line_start":320,"line_end":320,"column_start":24,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":69285,"byte_end":69301,"line_start":363,"line_end":363,"column_start":13,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":218}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":69440,"byte_end":69456,"line_start":370,"line_end":370,"column_start":13,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":222},{"krate":0,"index":223}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/tracker.rs","byte_start":70137,"byte_end":70144,"line_start":13,"line_end":13,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":241},{"krate":0,"index":243},{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":72176,"byte_end":72185,"line_start":39,"line_end":39,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":263},{"krate":0,"index":264},{"krate":0,"index":265},{"krate":0,"index":266}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":73221,"byte_end":73230,"line_start":79,"line_end":79,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":23446,"byte_end":23455,"line_start":717,"line_end":717,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":282},{"krate":0,"index":283}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":23757,"byte_end":23761,"line_start":732,"line_end":732,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":289},{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":23871,"byte_end":23879,"line_start":737,"line_end":737,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":27965,"byte_end":27971,"line_start":871,"line_end":871,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":327},{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":29343,"byte_end":29351,"line_start":920,"line_end":920,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":30962,"byte_end":30969,"line_start":973,"line_end":973,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":340},{"krate":0,"index":341},{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":32219,"byte_end":32224,"line_start":1017,"line_end":1017,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":345},{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":350},{"krate":0,"index":352},{"krate":0,"index":354}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":36769,"byte_end":36777,"line_start":1156,"line_end":1156,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":38062,"byte_end":38068,"line_start":1195,"line_end":1195,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":39499,"byte_end":39505,"line_start":1235,"line_end":1235,"column_start":13,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":40406,"byte_end":40413,"line_start":1266,"line_end":1266,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":381}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":40514,"byte_end":40520,"line_start":1272,"line_end":1272,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":384}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":40625,"byte_end":40633,"line_start":1278,"line_end":1278,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":387}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":40741,"byte_end":40747,"line_start":1284,"line_end":1284,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":390}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":40871,"byte_end":40879,"line_start":1290,"line_end":1290,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":40987,"byte_end":40993,"line_start":1296,"line_end":1296,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":41103,"byte_end":41111,"line_start":1302,"line_end":1302,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":402}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":41226,"byte_end":41232,"line_start":1308,"line_end":1308,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":406}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":41348,"byte_end":41356,"line_start":1315,"line_end":1315,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":409}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":41466,"byte_end":41472,"line_start":1321,"line_end":1321,"column_start":16,"column_end":22},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":41494,"byte_end":41502,"line_start":1322,"line_end":1322,"column_start":16,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":41545,"byte_end":41550,"line_start":1324,"line_end":1324,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/notifier.rs","byte_start":55559,"byte_end":55567,"line_start":33,"line_end":33,"column_start":6,"column_end":14},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":89},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/notifier.rs","byte_start":56651,"byte_end":56659,"line_start":76,"line_end":76,"column_start":21,"column_end":29},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":89},"to":{"krate":2,"index":9396}},{"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":60126,"byte_end":60132,"line_start":95,"line_end":95,"column_start":10,"column_end":16},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":152},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":66550,"byte_end":66556,"line_start":265,"line_end":265,"column_start":19,"column_end":25},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":152},"to":{"krate":2,"index":3251}},{"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":66711,"byte_end":66721,"line_start":273,"line_end":273,"column_start":24,"column_end":34},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":165},"to":{"krate":0,"index":158}},{"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":68054,"byte_end":68064,"line_start":320,"line_end":320,"column_start":24,"column_end":34},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":172},"to":{"krate":0,"index":158}},{"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":69285,"byte_end":69301,"line_start":363,"line_end":363,"column_start":13,"column_end":29},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":418},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/select.rs","byte_start":69440,"byte_end":69456,"line_start":370,"line_end":370,"column_start":13,"column_end":29},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":426},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/tracker.rs","byte_start":70137,"byte_end":70144,"line_start":13,"line_end":13,"column_start":6,"column_end":13},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":232},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":72176,"byte_end":72185,"line_start":39,"line_end":39,"column_start":6,"column_end":15},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":435},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/wait_group.rs","byte_start":73221,"byte_end":73230,"line_start":79,"line_end":79,"column_start":21,"column_end":30},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":435},"to":{"krate":2,"index":9396}},{"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":23446,"byte_end":23455,"line_start":717,"line_end":717,"column_start":6,"column_end":15},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":440},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":23757,"byte_end":23761,"line_start":732,"line_end":732,"column_start":22,"column_end":26},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":284},"to":{"krate":2,"index":7646}},{"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":23871,"byte_end":23879,"line_start":737,"line_end":737,"column_start":26,"column_end":34},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":495},"to":{"krate":2,"index":7466}},{"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":27965,"byte_end":27971,"line_start":871,"line_end":871,"column_start":9,"column_end":15},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":488},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":29343,"byte_end":29351,"line_start":920,"line_end":920,"column_start":9,"column_end":17},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":495},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":30962,"byte_end":30969,"line_start":973,"line_end":973,"column_start":9,"column_end":16},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":502},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":32219,"byte_end":32224,"line_start":1017,"line_end":1017,"column_start":9,"column_end":14},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":302},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":36769,"byte_end":36777,"line_start":1156,"line_end":1156,"column_start":9,"column_end":17},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":536},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":38062,"byte_end":38068,"line_start":1195,"line_end":1195,"column_start":13,"column_end":19},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":311},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":39499,"byte_end":39505,"line_start":1235,"line_end":1235,"column_start":13,"column_end":19},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":316},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":40406,"byte_end":40413,"line_start":1266,"line_end":1266,"column_start":19,"column_end":26},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":502},"to":{"krate":2,"index":2637}},{"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":40514,"byte_end":40520,"line_start":1272,"line_end":1272,"column_start":19,"column_end":25},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":488},"to":{"krate":2,"index":2637}},{"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":40625,"byte_end":40633,"line_start":1278,"line_end":1278,"column_start":19,"column_end":27},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":495},"to":{"krate":2,"index":2637}},{"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":40741,"byte_end":40747,"line_start":1284,"line_end":1284,"column_start":18,"column_end":24},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":488},"to":{"krate":2,"index":3251}},{"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":40871,"byte_end":40879,"line_start":1290,"line_end":1290,"column_start":18,"column_end":26},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":495},"to":{"krate":2,"index":3251}},{"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":40987,"byte_end":40993,"line_start":1296,"line_end":1296,"column_start":18,"column_end":24},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":488},"to":{"krate":2,"index":9602}},{"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":41103,"byte_end":41111,"line_start":1302,"line_end":1302,"column_start":18,"column_end":26},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":495},"to":{"krate":2,"index":9602}},{"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":41226,"byte_end":41232,"line_start":1308,"line_end":1308,"column_start":23,"column_end":29},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":488},"to":{"krate":2,"index":2667}},{"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":41348,"byte_end":41356,"line_start":1315,"line_end":1315,"column_start":23,"column_end":31},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":495},"to":{"krate":2,"index":2667}},{"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":41466,"byte_end":41472,"line_start":1321,"line_end":1321,"column_start":16,"column_end":22},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":488},"to":{"krate":2,"index":2672}},{"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":41494,"byte_end":41502,"line_start":1322,"line_end":1322,"column_start":16,"column_end":24},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":495},"to":{"krate":2,"index":2672}},{"span":{"file_name":"/Users/tyco/.cargo/registry/src/github.com-1ecc6299db9ec823/chan-0.1.23/src/lib.rs","byte_start":41545,"byte_end":41550,"line_start":1324,"line_end":1324,"column_start":36,"column_end":41},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":302},"to":{"krate":2,"index":9396}}]}